---
import EnhancedSubPageLayout from '../../components/EnhancedSubPageLayout.astro';
import { getEntryBySlug } from 'astro:content';

export async function getStaticPaths() {
  // Koristimo import.meta.glob da dobijemo sve MDX datoteke iz chapters/poglavlje-4/
  const files = import.meta.glob('/src/content/chapters/poglavlje-4/*.mdx');
  const paths = [];

  for (const path in files) {
    // Izvuci slug iz path-a (npr. "/src/content/chapters/poglavlje-4/naziv.mdx" -> "naziv")
    const slug = path.split('/').pop()?.replace('.mdx', '');
    if (slug && slug !== 'index') {
      paths.push({
        params: { slug }
      });
    }
  }

  return paths;
}

const { slug } = Astro.params;

if (!slug) {
  throw new Error('Slug je obavezan');
}

// Dohvati MDX entry iz chapters kolekcije
// @ts-ignore
const entry = await getEntryBySlug('chapters', `poglavlje-4/${slug}`);

if (!entry) {
  throw new Error(`Entry nije pronađen za slug: ${slug}`);
}

// Renderiraj MDX sadržaj
// @ts-ignore
const { Content } = await entry.render();

// Izvuci podatke iz frontmattera
// @ts-ignore
const { data } = entry;

// Fallback za chapterNumber ako nije postavljen
const chapterNumber = (data as any).chapterNumber || 4;

// Generiraj breadcrumb path
const breadcrumbPath = (data as any).breadcrumbPath || [
  { name: (data as any).title || slug, url: `/poglavlje-4/${slug}/` }
];

// Generiraj TOC items iz sadržaja
const generateTOCItems = (content: string) => {
  const headings = content.match(/<h[23][^>]*id="([^"]*)"[^>]*>([^<]*)<\/h[23]>/g);
  if (!headings) return [];
  
  return headings.map(heading => {
    const idMatch = heading.match(/id="([^"]*)"/);
    const titleMatch = heading.match(/>([^<]*)</);
    const levelMatch = heading.match(/<h([23])/);
    
    return {
      id: idMatch ? idMatch[1] : '',
      title: titleMatch ? titleMatch[1] : '',
      level: levelMatch ? parseInt(levelMatch[1]) : 2
    };
  }).filter(item => item.id && item.title);
};

// Dohvati sadržaj za TOC generiranje
// @ts-ignore
const { remarkPluginFrontmatter } = await entry.render();
const content = remarkPluginFrontmatter?.content || '';
const tocItems = generateTOCItems(content);

// Odredi navigacijske linkove
const getNavigationLinks = (currentSlug: string) => {
  const pages = [
    { slug: 'index', title: 'Poglavlje 4: Pokretljivost bakterija', isTheory: true },
    { slug: 'flagele-struktura', title: 'Struktura i funkcija flagela', isTheory: true },
    { slug: 'metode-ispitivanja', title: 'Metode ispitivanja pokretljivosti', isTheory: true },
    { slug: 'vjezba-4', title: 'Vježba 4: TTC metoda', isTheory: false },
    { slug: 'vjezba-4-1', title: 'Vježba 4.1: Mikroskopska metoda', isTheory: false },
    { slug: 'vjezba-4-2', title: 'Vježba 4.2: Craigie tuba', isTheory: false }
  ];
  
  const currentIndex = pages.findIndex(page => page.slug === currentSlug);
  const prev = currentIndex > 0 ? pages[currentIndex - 1] : null;
  const next = currentIndex < pages.length - 1 ? pages[currentIndex + 1] : null;
  
  return { prev, next };
};

const { prev, next } = getNavigationLinks(slug);
---

<EnhancedSubPageLayout
  title={(data as any).title || `Poglavlje 4 - ${slug}`}
  description={(data as any).description || ''}
  chapterNumber={chapterNumber}
  primaryColor="blue"
  prevLink={prev ? `/poglavlje-4/${prev.slug}/` : '/poglavlje-3/'}
  nextLink={next ? `/poglavlje-4/${next.slug}/` : '/poglavlje-5/'}
  prevText={prev ? (prev.isTheory ? 'Poglavlje 4' : 'Vježba 4') : '← Poglavlje 3'}
  nextText={next ? (next.isTheory ? 'Poglavlje 4' : 'Vježba 4') : 'Poglavlje 5 →'}
  breadcrumbPath={breadcrumbPath}
  tocItems={tocItems}
>
  <!-- Main Content Section -->
  <section class="py-16 bg-white">
    <div class="max-w-4xl mx-auto px-4 sm:px-6">
      
      <!-- Sadržaj stranice -->
      <div class="prose prose-lg max-w-none">
        <slot />
      </div>

    </div>
  </section>
</EnhancedSubPageLayout>