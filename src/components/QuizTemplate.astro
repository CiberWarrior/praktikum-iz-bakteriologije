---
import ChapterLayout from './ChapterLayout.astro';

export interface Props {
  chapterNumber: number;
  chapterTitle: string;
  chapterDescription: string;
  primaryColor: string;
  questions: {
    question: string;
    options: {
      a: string;
      b: string;
      c: string;
      d: string;
    };
    correctAnswer: 'a' | 'b' | 'c' | 'd';
  }[];
  prevLink: string;
  nextLink: string;
  prevText: string;
  nextText: string;
  ctaTitle: string;
  ctaDescription: string;
  ctaPrimaryText: string;
  ctaPrimaryLink: string;
  ctaSecondaryText: string;
  ctaSecondaryLink: string;
  breadcrumbPath: Array<{ name: string; url: string }>;
}

const {
  chapterNumber,
  chapterTitle,
  chapterDescription,
  primaryColor,
  questions,
  prevLink,
  nextLink,
  prevText,
  nextText,
  ctaTitle,
  ctaDescription,
  ctaPrimaryText,
  ctaPrimaryLink,
  ctaSecondaryText,
  ctaSecondaryLink,
  breadcrumbPath
} = Astro.props;

// Color mapping for dynamic styling
const colorClasses = {
  green: {
    bg: 'from-green-50 to-green-100',
    border: 'border-green-200',
    icon: 'bg-green-600',
    text: 'text-green-900',
    textSecondary: 'text-green-700',
    textTertiary: 'text-green-800',
    button: 'from-green-600 to-green-700 hover:from-green-700 hover:to-green-800',
    buttonSecondary: 'bg-green-600 hover:bg-green-700',
    radio: 'text-green-600',
    instructions: 'bg-green-50 border-green-200',
    instructionsText: 'text-green-800',
    results: 'from-green-50 to-blue-50 border-green-200',
    resultsIcon: 'bg-green-100',
    resultsIconColor: 'text-green-600'
  },
  blue: {
    bg: 'from-blue-50 to-blue-100',
    border: 'border-blue-200',
    icon: 'bg-blue-600',
    text: 'text-blue-900',
    textSecondary: 'text-blue-700',
    textTertiary: 'text-blue-800',
    button: 'from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800',
    buttonSecondary: 'bg-blue-600 hover:bg-blue-700',
    radio: 'text-blue-600',
    instructions: 'bg-blue-50 border-blue-200',
    instructionsText: 'text-blue-800',
    results: 'from-blue-50 to-blue-50 border-blue-200',
    resultsIcon: 'bg-blue-100',
    resultsIconColor: 'text-blue-600'
  },
  lime: {
    bg: 'from-lime-50 to-lime-100',
    border: 'border-lime-200',
    icon: 'bg-lime-600',
    text: 'text-lime-900',
    textSecondary: 'text-lime-700',
    textTertiary: 'text-lime-800',
    button: 'from-lime-600 to-lime-700 hover:from-lime-700 hover:to-lime-800',
    buttonSecondary: 'bg-lime-600 hover:bg-lime-700',
    radio: 'text-lime-600',
    instructions: 'bg-lime-50 border-lime-200',
    instructionsText: 'text-lime-800',
    results: 'from-lime-50 to-blue-50 border-lime-200',
    resultsIcon: 'bg-lime-100',
    resultsIconColor: 'text-lime-600'
  },
  amber: {
    bg: 'from-amber-50 to-amber-100',
    border: 'border-amber-200',
    icon: 'bg-amber-600',
    text: 'text-amber-900',
    textSecondary: 'text-amber-700',
    textTertiary: 'text-amber-800',
    button: 'from-amber-600 to-amber-700 hover:from-amber-700 hover:to-amber-800',
    buttonSecondary: 'bg-amber-600 hover:bg-amber-700',
    radio: 'text-amber-600',
    instructions: 'bg-amber-50 border-amber-200',
    instructionsText: 'text-amber-800',
    results: 'from-amber-50 to-blue-50 border-amber-200',
    resultsIcon: 'bg-amber-100',
    resultsIconColor: 'text-amber-600'
  }
};

const colors = colorClasses[primaryColor as keyof typeof colorClasses] || colorClasses.blue;
---

<ChapterLayout 
  title={chapterTitle}
  description={chapterDescription}
  chapterNumber={chapterNumber}
  primaryColor={primaryColor}
  prevLink={prevLink}
  nextLink={nextLink}
  prevText={prevText}
  nextText={nextText}
  ctaTitle={ctaTitle}
  ctaDescription={ctaDescription}
  ctaPrimaryText={ctaPrimaryText}
  ctaPrimaryLink={ctaPrimaryLink}
  ctaSecondaryText={ctaSecondaryText}
  ctaSecondaryLink={ctaSecondaryLink}
  showBreadcrumb={true}
  breadcrumbPath={breadcrumbPath}
>


  <!-- Quiz Instructions -->
  <div class="bg-gray-800 rounded-xl p-6 border border-gray-500/30 mb-8 shadow-lg">
    <div class="flex items-start">
      <div class="flex-shrink-0 w-12 h-12 bg-gradient-to-br from-gray-400 to-gray-600 rounded-lg flex items-center justify-center mr-4">
        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
      </div>
      <div>
        <h3 class="text-xl font-bold text-white mb-3 font-heading">Upute za quiz</h3>
        <ul class="text-gray-300 space-y-2 font-body">
          <li class="flex items-start">
            <span class="text-gray-400 mr-2">•</span>
            Odgovorite na sva {questions.length} pitanja
          </li>
          <li class="flex items-start">
            <span class="text-gray-400 mr-2">•</span>
            Svako pitanje ima 4 moguća odgovora (a, b, c, d)
          </li>
          <li class="flex items-start">
            <span class="text-gray-400 mr-2">•</span>
            Možete promijeniti odgovor prije slanja
          </li>
          <li class="flex items-start">
            <span class="text-gray-400 mr-2">•</span>
            Nakon slanja vidjet ćete svoj rezultat i postotak uspjeha
          </li>
          <li class="flex items-start">
            <span class="text-gray-400 mr-2">•</span>
            Možete pokušati ponovno ako niste zadovoljni rezultatom
          </li>
        </ul>
      </div>
    </div>
  </div>

  <!-- Quiz Form -->
  <div class="bg-gray-800 rounded-xl shadow-lg p-8 border border-gray-500/30">
    <form id="quizForm" class="space-y-8">
      {questions.map((q, index) => (
        <div class="border-b border-gray-600 pb-6 last:border-b-0">
          <h3 class="text-lg font-semibold text-white mb-4 font-heading">{index + 1}. {q.question}</h3>
          <div class="space-y-3">
            <label class="flex items-center cursor-pointer hover:bg-gray-700 p-3 rounded-lg transition-colors">
              <input type="radio" name={`q${index + 1}`} value="a" class={`mr-3 text-blue-500`} required>
              <span class="text-gray-300 font-body">a) {q.options.a}</span>
            </label>
            <label class="flex items-center cursor-pointer hover:bg-gray-700 p-3 rounded-lg transition-colors">
              <input type="radio" name={`q${index + 1}`} value="b" class={`mr-3 text-blue-500`} required>
              <span class="text-gray-300 font-body">b) {q.options.b}</span>
            </label>
            <label class="flex items-center cursor-pointer hover:bg-gray-700 p-3 rounded-lg transition-colors">
              <input type="radio" name={`q${index + 1}`} value="c" class={`mr-3 text-blue-500`} required>
              <span class="text-gray-300 font-body">c) {q.options.c}</span>
            </label>
            <label class="flex items-center cursor-pointer hover:bg-gray-700 p-3 rounded-lg transition-colors">
              <input type="radio" name={`q${index + 1}`} value="d" class={`mr-3 text-blue-500`} required>
              <span class="text-gray-300 font-body">d) {q.options.d}</span>
            </label>
          </div>
        </div>
      ))}

      <!-- Submit Button -->
      <div class="text-center pt-6">
        <button 
          type="submit" 
          class="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-10 py-4 rounded-xl font-semibold text-xl transition-all duration-300 transform hover:scale-105 shadow-lg"
        >
          Provjeri rezultat
        </button>
      </div>
    </form>

    <!-- Results (Hidden by default) -->
    <div id="quizResults" class="hidden mt-8 p-8 bg-gray-800 rounded-xl border border-gray-500/30 shadow-lg">
      <div class="text-center">
        <div class="w-20 h-20 bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <h3 class="text-3xl font-bold text-white mb-4 font-heading">Rezultat quiz-a</h3>
        <p class="text-gray-300 text-xl mb-6 font-body">Odgovorili ste na <span id="correctAnswers" class="font-bold text-green-400">0</span> od <span id="totalQuestions" class="font-bold text-white">{questions.length}</span> pitanja</p>
        <div class="text-6xl font-bold text-green-400 mb-6">
          <span id="percentage">0</span>%
        </div>
        <p id="resultMessage" class="text-xl text-white mb-8 font-body"></p>
        <div class="flex flex-col sm:flex-row gap-4 justify-center">
          <button 
            onclick="resetQuizGlobal()" 
            class="bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white px-8 py-3 rounded-lg font-semibold text-lg transition-all duration-300"
          >
            Pokušaj ponovno
          </button>
          <a 
            href={prevLink}
            class="bg-gradient-to-r from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800 text-white px-8 py-3 rounded-lg font-semibold text-lg transition-all duration-300"
          >
            Povratak na poglavlje
          </a>
        </div>
      </div>
    </div>
  </div>

</ChapterLayout>

<script define:vars={{ questions, primaryColor }}>
  // Quiz functionality
  const correctAnswers = {};
  
  // Generate correct answers object from questions array
  questions.forEach((q, index) => {
    correctAnswers[`q${index + 1}`] = q.correctAnswer;
  });

  const totalQuestions = Object.keys(correctAnswers).length;

  const form = document.getElementById('quizForm');
  if (form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      let correctCount = 0;
      
      // Check each answer
      Object.keys(correctAnswers).forEach(question => {
        const selectedAnswer = document.querySelector(`input[name="${question}"]:checked`);
        if (selectedAnswer && selectedAnswer.value === correctAnswers[question]) {
          correctCount++;
        }
      });
      
      // Calculate percentage
      const percentage = Math.round((correctCount / totalQuestions) * 100);
      
      // Update results
      const correctAnswersEl = document.getElementById('correctAnswers');
      const totalQuestionsEl = document.getElementById('totalQuestions');
      const percentageEl = document.getElementById('percentage');
      
      if (correctAnswersEl) correctAnswersEl.textContent = correctCount.toString();
      if (totalQuestionsEl) totalQuestionsEl.textContent = totalQuestions.toString();
      if (percentageEl) percentageEl.textContent = percentage.toString();
      
      // Set result message based on percentage
      const resultMessage = document.getElementById('resultMessage');
      if (resultMessage) {
        if (percentage === 100) {
          resultMessage.innerHTML = '🎉 <strong>Odlično!</strong><br><span class="text-lg">Odgovorili ste na sva pitanja bez greške!<br>Vaše znanje iz ovog poglavlja je <em>izvrsno</em> i možete nastaviti s učenjem sljedećeg poglavlja.</span>';
          resultMessage.className = 'text-xl text-green-300 mb-8 font-semibold leading-relaxed';
        } else if (percentage >= 80) {
          resultMessage.innerHTML = '👏 <strong>Izvrsno!</strong><br><span class="text-lg">Imate <em>odlično</em> znanje iz ovog poglavlja!<br>Samo malo više pažnje i bit ćete savršeni. Nastavite s učenjem!</span>';
          resultMessage.className = 'text-xl text-green-300 mb-8 font-semibold leading-relaxed';
        } else if (percentage >= 60) {
          resultMessage.innerHTML = '👍 <strong>Dobro!</strong><br><span class="text-lg">Imate <em>solidno</em> znanje iz ovog poglavlja.<br>Preporučujemo da ponovno pročitate gradivo za još bolje razumijevanje.</span>';
          resultMessage.className = 'text-xl text-blue-300 mb-8 font-semibold leading-relaxed';
        } else if (percentage >= 40) {
          resultMessage.innerHTML = '⚠️ <strong>Prosjecno</strong><br><span class="text-lg">Potrebno je <em>više učenja</em>.<br>Vratite se na gradivo, pročitajte ponovno i pokušajte quiz ponovno.</span>';
          resultMessage.className = 'text-xl text-yellow-300 mb-8 font-semibold leading-relaxed';
        } else {
          resultMessage.innerHTML = '📚 <strong>Potrebno više učenja</strong><br><span class="text-lg">Preporučujemo da <em>detaljno pročitate</em> sve dijelove poglavlja.<br>Učenje je proces - ne odustajte, vratite se na gradivo!</span>';
          resultMessage.className = 'text-xl text-red-300 mb-8 font-semibold leading-relaxed';
        }
      }
      
      // Show results
      const quizResults = document.getElementById('quizResults');
      if (quizResults) {
        quizResults.classList.remove('hidden');
        quizResults.scrollIntoView({ behavior: 'smooth' });
      }
    });
  }

  function resetQuiz() {
    // Reset form
    const form = document.getElementById('quizForm');
    if (form) form.reset();
    
    // Hide results
    const results = document.getElementById('quizResults');
    if (results) results.classList.add('hidden');
    
    // Scroll to top
    window.scrollTo({ top: 0, behavior: 'smooth' });
  }

  // Global function for onclick
  function resetQuizGlobal() {
    resetQuiz();
  }

  // Make functions available globally
  window.resetQuizGlobal = resetQuizGlobal;
</script>
